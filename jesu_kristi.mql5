//+------------------------------------------------------------------+
//|                                                 jesus_kristi.mq5 |
//|                                  Copyright 2024, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"

#include <Trade\Trade.mqh>

struct OrderParams {
  double volume;
  double price;
  double tp;
  double sl;
};

datetime previousTime;
CTrade trade;
string tradeComment = "Detty December";
double riskPercent = 1.0;
double riskAmount = 50;
string symbols[] = {
  "XAUUSDm",
  "NZDUSDm",
  "NZDJPYm",
  "EURJPYm",
  "USDJPYm",
  "AUDJPYm",
  "CHFJPYm",
  "AUDUSDm",
  "CADJPYm", 
  "GBPJPYm",
  "BTCUSDm",
  "EURNZDm",
  "GBPNZDm",
  "EURGBPm",
  "GBPCADm"
};
/*string symbols[] = {
   "XAUUSD",
   "NZDUSD",
   "NZDJPY",
   "EURJPY",
   "USDJPY",
   "AUDJPY",
   "CHFJPY",
   "AUDUSD",
   "CADJPY", 
   "GBPJPY",
   "BTCUSD",
   "EURNZD",
   "GBPNZD",
   "EURGBP",
   "GBPCAD"
};*/
/*string symbols[] = {
  "Volatility 10 Index",
  "Volatility 25 Index",
  "Volatility 50 Index",
  "Volatility 75 Index",
  "Volatility 100 Index",
  "Volatility 10 (1s) Index",
  "Volatility 25 (1s) Index",
  "Volatility 50 (1s) Index",
  "Volatility 300 (1s) Index",
  "Volatility 75 (1s) Index",
  "Volatility 100 (1s) Index",
  "Volatility 150 (1s) Index",
  "Volatility 250 (1s) Index",
  "Volatility 200 (1s) Index",
  "Boom 500 Index",
  "Boom 300 Index",
  "Boom 1000 Index",
  "Crash 500 Index",
  "Crash 300 Index",
  "Crash 1000 Index",
  "Step Index",
  "Step Index 200",
  "Step Index 500",
  "Range Break 100 Index",
  "Range Break 200 Index",
  "Jump 25 Index",
  "Jump 10 Index",
  "Jump 50 Index",
  "Jump 100 Index",
  "Jump 75 Index",
  "DEX 600 DOWN Index",
  "DEX 900 DOWN Index",
  "DEX 1500 DOWN Index",
  "DEX 600 UP Index",
  "DEX 900 UP Index",
  "DEX 1500 UP Index",
  "Drift Switch Index 30",
  "Drift Switch Index 20",
  "Drift Switch Index 10"
};*/
string signals[];
double startingBalance;
double lastPercentage = 0;



//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
    startingBalance = AccountInfoDouble(ACCOUNT_BALANCE);
   return(INIT_SUCCEEDED);
  }

void OnTick()
  {
    if (iTime(_Symbol, PERIOD_H4, 0) != previousTime)
    {
        previousTime = iTime(_Symbol, PERIOD_H4, 0);
        SendNotification("EA Running!");
    }

    double equity = AccountInfoDouble(ACCOUNT_EQUITY);
    double percentageChange = MathFloor((equity - startingBalance) / startingBalance * 100);
    double remainder = (int)percentageChange % 2;
    if (remainder == 0 && lastPercentage != percentageChange)
    {
      lastPercentage = percentageChange;
      SendNotification(DoubleToString(percentageChange, 0) + "% change in balance");
    }

    for (int i = 0; i < ArraySize(symbols); i += 1)
      {
        MqlDateTime currentTime;
        TimeToStruct(TimeCurrent(), currentTime);
        string symbol = symbols[i];
        string signal = IntegerToString(currentTime.day_of_year)+IntegerToString(currentTime.hour)+symbol;

        if (!IsSignalCalled(signal + "Buy") && !IsTradeOpen(symbol) && ShouldBuy(symbol))
          {
            AddSignalToList(signal + "Buy");
            OrderParams params = GetBuyOrderParams(symbol);
            trade.Buy(params.volume, symbol, params.price, params.sl, params.tp, tradeComment);

            SendNotification("Possible Buy opportunity on "+symbol+"! Check it out");
          }
      }
  }

OrderParams GetBuyOrderParams(string symbol)
  {
    double pointSize = SymbolInfoDouble(symbol, SYMBOL_POINT);
    OrderParams params;
    params.price = SymbolInfoDouble(symbol, SYMBOL_BID);
    MqlRates rates[];
  
    CopyRates(symbol, PERIOD_H1, 1, 4, rates);



    double padding = (pointSize * 30 * 10);
    params.sl = MathMin(rates[0].low, MathMin(rates[1].low, MathMin(rates[2].low, rates[3].low))) - padding;
    params.tp = params.price + (6 * (params.price - params.sl));
    params.volume = CalculateVolume(riskAmount, params.price, params.sl, symbol);

    return params;
  }

bool ShouldBuy(string symbol)
  {
    MqlRates rates[];

    CopyRates(symbol, PERIOD_H1, 1, 4, rates);
    if (ArraySize(rates) < 4)
      {
        Print("problem with symbol ", symbol);
        return false;
      }
    
    
    return !Direction(rates[0]) && Direction(rates[1]) && Direction(rates[2]) && Direction(rates[3]) && rates[3].low < rates[1].close && rates[3].open > rates[2].open;
  }

bool Direction(MqlRates &rate)
  {
    return rate.close > rate.open;
  }

void BreakEven()
  {
    for (int i = 0; i <= PositionsTotal(); i++)
    {
      PositionGetSymbol(i);
      if (PositionGetString(POSITION_COMMENT) != tradeComment || PositionGetDouble(POSITION_PROFIT) <= 0)
      {
        continue;
      }

      long type = PositionGetInteger(POSITION_TYPE);
      double price = PositionGetDouble(POSITION_PRICE_OPEN);
      double sl = PositionGetDouble(POSITION_SL);
      double tp = PositionGetDouble(POSITION_TP);
      double profit = PositionGetDouble(POSITION_PROFIT);

      if ((type == POSITION_TYPE_BUY && price < sl) || (type == POSITION_TYPE_SELL && price > sl)) {
        continue;
      }

      double volume = PositionGetDouble(POSITION_VOLUME);
      if (profit >= MathAbs(volume * 0.5 * (tp - price)))
        {
          long ticket = PositionGetInteger(POSITION_TICKET);
          string symbol = PositionGetString(POSITION_SYMBOL);
          double point = SymbolInfoDouble(symbol, SYMBOL_POINT);

          trade.PositionModify(ticket, price + (0.2 * (tp - price)), tp);
        }
    }
  }

void AddSignalToList(string signal)
  {
    ArrayResize(signals, ArraySize(signals) + 1);
    signals[ArraySize(signals) - 1] = signal;
  }

bool IsSignalCalled(string signal)
  {
    for (int i = ArraySize(signals) - 1; i > 0; i--)
    {
      if (signals[i] == signal)
        return true;
    }
    return false;
  }

double CalculateVolume(double _riskAmount, double entryPrice, double stopLoss, string symbol) 
  {
      double tickValue = SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_VALUE);
      double pointSize = SymbolInfoDouble(symbol, SYMBOL_POINT);
      double lotStep = SymbolInfoDouble(symbol, SYMBOL_VOLUME_STEP);
      double tickSize = SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_SIZE);


      double pipDifference = MathAbs(entryPrice - stopLoss) / pointSize;

      double pipValue = tickValue * (pointSize / tickSize);

      double volume = _riskAmount / (pipDifference * pipValue);

      volume = MathFloor(volume / lotStep) * lotStep;

      return volume;
  }

bool IsTradeOpen(string symbol)
  {
    for (int i = 0; i < PositionsTotal(); i++)
    {
      if (PositionGetSymbol(i) == symbol && PositionGetString(POSITION_COMMENT) == tradeComment)
      {
        return true;
      }
    }

    return false;
  }